name: 🎵 Vibecoding Workflow (Feature-Complete)

on:
  push:
    branches:
      - 'feature/cursor-**'
      - 'feature/claude-**'
      - 'feature/collab-**'
  pull_request:
    branches: [develop, main]
  workflow_dispatch:
    inputs:
      session_type:
        description: '바이브코딩 세션 타입'
        required: true
        default: 'feature-complete'
        type: choice
        options:
          - feature-complete
          - cursor-only
          - claude-only
          - collaborative
      feature_status:
        description: '기능 개발 상태'
        required: false
        default: 'in-progress'
        type: choice
        options:
          - in-progress
          - ready-for-review
          - feature-complete

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  FLUTTER_VERSION: '3.16.0'

jobs:
  # ===================================
  # 🎯 바이브코딩 세션 감지
  # ===================================
  detect-session:
    name: 🎯 Detect Vibecoding Session
    runs-on: ubuntu-latest
    outputs:
      session_type: ${{ steps.detect.outputs.session_type }}
      cursor_changes: ${{ steps.detect.outputs.cursor_changes }}
      claude_changes: ${{ steps.detect.outputs.claude_changes }}
      sync_required: ${{ steps.detect.outputs.sync_required }}
      feature_complete: ${{ steps.detect.outputs.feature_complete }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Detect session type and changes
        id: detect
        run: |
          # 브랜치명으로 세션 타입 감지
          if [[ "${{ github.ref }}" == *"cursor"* ]]; then
            echo "session_type=cursor" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == *"claude"* ]]; then
            echo "session_type=claude" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == *"collab"* ]]; then
            echo "session_type=collaborative" >> $GITHUB_OUTPUT
          else
            echo "session_type=unknown" >> $GITHUB_OUTPUT
          fi

          # 변경사항 분석
          CURSOR_CHANGES=$(git log --oneline -1 | grep -c 'cursor\|ui\|frontend' || echo 0)
          CLAUDE_CHANGES=$(git log --oneline -1 | grep -c 'claude\|api\|backend' || echo 0)
          echo "cursor_changes=${CURSOR_CHANGES}" >> $GITHUB_OUTPUT
          echo "claude_changes=${CLAUDE_CHANGES}" >> $GITHUB_OUTPUT

          # 기능 완성 체크 (커밋 메시지에 완성 키워드가 있는지 확인)
          COMPLETION_CHECK=$(git log --oneline -1 | grep -E -c 'complete|완료|완성|done|finish|feat:' || echo 0)

          if [ $COMPLETION_CHECK -gt 0 ]; then
            echo "sync_required=true" >> $GITHUB_OUTPUT
            echo "feature_complete=true" >> $GITHUB_OUTPUT
          else
            echo "sync_required=false" >> $GITHUB_OUTPUT
            echo "feature_complete=false" >> $GITHUB_OUTPUT
          fi

      - name: 📊 Session summary
        run: |
          echo "🎵 Vibecoding Session Detected:"
          echo "  - Session Type: ${{ steps.detect.outputs.session_type }}"
          echo "  - Cursor Changes: ${{ steps.detect.outputs.cursor_changes }}"
          echo "  - Claude Changes: ${{ steps.detect.outputs.claude_changes }}"
          echo "  - Feature Complete: ${{ steps.detect.outputs.feature_complete }}"
          echo "  - Sync Required: ${{ steps.detect.outputs.sync_required }}"

      # 🤖 자동화 스크립트 권한 설정
      - name: 🔧 Setup automation scripts
        run: |
          chmod +x scripts/*.sh
          echo "✅ 자동화 스크립트 실행 권한 설정 완료"

  # ===================================
  # 🚀 빠른 품질 검사 (바이브코딩 최적화)
  # ===================================
  quick-check:
    name: 🚀 Quick Quality Check
    runs-on: ubuntu-latest
    needs: detect-session
    if: |
      github.event_name == 'push' && 
      (startsWith(github.ref, 'refs/heads/feature/cursor-') ||
       startsWith(github.ref, 'refs/heads/feature/claude-') ||
       startsWith(github.ref, 'refs/heads/feature/collab-'))

    steps:
      - uses: actions/checkout@v4

      # Node.js 빠른 설정
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: 📦 Install dependencies (cached)
        run: pnpm install --frozen-lockfile --prefer-offline

      # Python 빠른 설정 (백엔드 변경사항 있을 때만)
      - uses: actions/setup-python@v4
        if: needs.detect-session.outputs.claude_changes > 0
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 🐍 Quick Python setup
        if: needs.detect-session.outputs.claude_changes > 0
        run: |
          pip install ruff black isort
          pip install -r api/requirements.txt --quiet

      # 빠른 린트 (변경된 파일만)
      - name: 🔍 Quick lint (changed files only)
        run: |
          # 변경된 파일들만 린트
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          echo "Changed files: $CHANGED_FILES"

          if echo "$CHANGED_FILES" | grep -q "\.py$"; then
            echo "🐍 Python files changed - running quick lint"
            ruff check $(echo "$CHANGED_FILES" | grep "\.py$" | xargs) || true
          fi

          if echo "$CHANGED_FILES" | grep -q "\.dart$"; then
            echo "📱 Flutter files changed - running quick analysis"
            cd client && flutter analyze --no-fatal-infos || true
          fi

      # 컴파일 체크 (빌드까지는 하지 않음)
      - name: 🔧 Quick compile check
        run: |
          if [ "${{ needs.detect-session.outputs.claude_changes }}" -gt 0 ]; then
            echo "🐍 Checking Python syntax"
            python -m py_compile api/app/*.py || true
          fi

          if [ "${{ needs.detect-session.outputs.cursor_changes }}" -gt 0 ]; then
            echo "📱 Checking Flutter compilation"
            cd client && flutter analyze --no-fatal-infos || true
          fi

  # ===================================
  # 🎯 기능 완성도 검증
  # ===================================
  feature-validation:
    name: 🎯 Feature Completion Validation
    runs-on: ubuntu-latest
    needs: [detect-session, quick-check]
    if: |
      github.event_name == 'push' && 
      needs.quick-check.result == 'success'

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Check feature completeness
        id: feature-check
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          FEATURE_NAME=$(echo "$BRANCH_NAME" | cut -d'-' -f3-)

          echo "feature_name=$FEATURE_NAME" >> $GITHUB_OUTPUT

          # 기능 완성도 체크 (커밋 메시지 분석)
          RECENT_COMMITS=$(git log --oneline -10 --grep="complete\|done\|finish\|ready" | wc -l)

          if [ "$RECENT_COMMITS" -gt 0 ]; then
            echo "completion_status=ready-for-review" >> $GITHUB_OUTPUT
          else
            echo "completion_status=in-progress" >> $GITHUB_OUTPUT
          fi

          # 테스트 파일 존재 확인
          if find . -name "*test*" -o -name "*spec*" | grep -q "$FEATURE_NAME"; then
            echo "has_tests=true" >> $GITHUB_OUTPUT
          else
            echo "has_tests=false" >> $GITHUB_OUTPUT
          fi

      - name: 🎯 Feature completion summary
        run: |
          echo "## 🎯 기능 완성도 체크" >> $GITHUB_STEP_SUMMARY
          echo "- **기능명**: ${{ steps.feature-check.outputs.feature_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **완성 상태**: ${{ steps.feature-check.outputs.completion_status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **테스트 존재**: ${{ steps.feature-check.outputs.has_tests }}" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.feature-check.outputs.completion_status }}" = "ready-for-review" ]; then
            echo "✅ **기능이 완성되었습니다! develop으로 PR을 생성하세요.**" >> $GITHUB_STEP_SUMMARY
          else
            echo "🚧 **기능 개발이 진행중입니다. 완성 후 'complete' 키워드로 커밋하세요.**" >> $GITHUB_STEP_SUMMARY
          fi

  # ===================================
  # 🚀 자동 PR 생성 (기능 완성 시)
  # ===================================
  auto-pr-to-develop:
    name: 🚀 Auto PR to Develop
    runs-on: ubuntu-latest
    needs: [detect-session, quick-check, feature-validation]
    if: |
      needs.feature-validation.outputs.completion_status == 'ready-for-review' &&
      github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: 🚀 Create feature-complete PR to develop
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          FEATURE_NAME="${{ needs.feature-validation.outputs.feature_name }}"
          PR_TITLE="✨ [바이브코딩] $FEATURE_NAME 기능 완성"

          PR_BODY="# ✨ 바이브코딩 기능 완성

          ## 🎯 완성된 기능
          **기능명**: $FEATURE_NAME
          **세션 타입**: ${{ needs.detect-session.outputs.session_type }}
          **브랜치**: \`$BRANCH_NAME\`

          ## ✅ 완성 확인사항
          - [x] 기능 구현 완료
          - [${{ needs.feature-validation.outputs.has_tests == 'true' && 'x' || ' ' }}] 테스트 작성
          - [x] 품질 검사 통과
          - [ ] 코드 리뷰 대기

          ## 🔄 다음 단계
          1. 코드 리뷰 완료 후 develop에 머지
          2. develop → main PR 고려
          3. 배포 준비

          > 🎵 Cursor와 Claude Code의 바이브코딩으로 완성된 기능입니다!"

          # develop 브랜치 확인/생성
          git fetch origin || true
          git checkout -B develop origin/main 2>/dev/null || git checkout develop

          # PR 생성 (중복 방지)
          if ! gh pr list --head "$BRANCH_NAME" --base develop --state open | grep -q "$BRANCH_NAME"; then
            gh pr create \
              --title "$PR_TITLE" \
              --body "$PR_BODY" \
              --base develop \
              --head "$BRANCH_NAME" \
              --label "vibecoding,feature-complete,ready-for-review"
            echo "✅ PR이 생성되었습니다!"
          else
            echo "ℹ️ PR이 이미 존재합니다."
          fi

  # ===================================
  # 🎵 바이브코딩 세션 상태 리포트
  # ===================================
  session-report:
    name: 🎵 Vibecoding Session Report
    runs-on: ubuntu-latest
    needs: [detect-session, quick-check]
    if: always()

    steps:
      - name: 📊 Generate session report
        run: |
          echo "# 🎵 Vibecoding Session Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 세션 정보" >> $GITHUB_STEP_SUMMARY
          echo "- **세션 타입**: ${{ needs.detect-session.outputs.session_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **브랜치**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **커밋 해시**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 변경사항 분석" >> $GITHUB_STEP_SUMMARY
          echo "- **커서 관련 변경**: ${{ needs.detect-session.outputs.cursor_changes }}개" >> $GITHUB_STEP_SUMMARY
          echo "- **클로드 관련 변경**: ${{ needs.detect-session.outputs.claude_changes }}개" >> $GITHUB_STEP_SUMMARY
          echo "- **동기화 필요**: ${{ needs.detect-session.outputs.sync_required }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 품질 검사 결과" >> $GITHUB_STEP_SUMMARY
          echo "- **빠른 검사**: ${{ needs.quick-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "🚀 **다음 단계**: 기능 완료 커밋 시 자동으로 develop 브랜치로 PR이 생성됩니다." >> $GITHUB_STEP_SUMMARY

  # ===================================
  # 🔔 Discord/Slack 알림 (선택사항)
  # ===================================
  notify-session:
    name: 🔔 Session Notification
    runs-on: ubuntu-latest
    needs: [detect-session, quick-check]
    if: |
      always() && 
      (needs.quick-check.result == 'failure' || 
       needs.detect-session.outputs.sync_required == 'true')

    steps:
      - name: 🔔 Send notification
        run: |
          # Discord/Slack 웹훅 URL이 설정되어 있으면 알림 발송
          if [ -n "${{ secrets.DISCORD_WEBHOOK_URL }}" ]; then
            WEBHOOK_DATA=$(cat <<EOF
          {
            "embeds": [{
              "title": "🎵 Vibecoding Session Update",
              "description": "세션 상태가 업데이트되었습니다.",
              "color": 3447003,
              "fields": [
                {"name": "브랜치", "value": "${{ github.ref_name }}", "inline": true},
                {"name": "세션 타입", "value": "${{ needs.detect-session.outputs.session_type }}", "inline": true},
                {"name": "품질 검사", "value": "${{ needs.quick-check.result }}", "inline": true}
              ]
            }]
          }
          EOF
          )
            curl -H "Content-Type: application/json" \
                 -d "$WEBHOOK_DATA" \
                 "${{ secrets.DISCORD_WEBHOOK_URL }}" || echo "Notification failed"
          fi
