name: 🔄 CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  # Cache versions
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  FLUTTER_VERSION: '3.16.0'

  # Cache keys
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

jobs:
  # ===================================
  # 📋 변경사항 감지 및 설정
  # ===================================
  changes:
    name: 📋 Detect Changes
    runs-on: ubuntu-latest
    outputs:
      api: ${{ steps.changes.outputs.api }}
      ai: ${{ steps.changes.outputs.ai }}
      client: ${{ steps.changes.outputs.client }}
      shared: ${{ steps.changes.outputs.shared }}
      docker: ${{ steps.changes.outputs.docker }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            api:
              - 'api/**'
              - 'shared/**'
              - 'pyproject.toml'
            ai:
              - 'ai/**' 
              - 'shared/**'
              - 'pyproject.toml'
            client:
              - 'client/**'
              - 'shared/**'
            shared:
              - 'shared/**'
              - 'package.json'
              - 'pnpm-lock.yaml'
            docker:
              - 'docker/**'
              - 'Dockerfile*'

  # ===================================
  # 🔍 코드 품질 검사
  # ===================================
  lint:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    needs: changes
    if: |
      needs.changes.outputs.api == 'true' || 
      needs.changes.outputs.ai == 'true' || 
      needs.changes.outputs.client == 'true' || 
      needs.changes.outputs.shared == 'true'

    steps:
      - uses: actions/checkout@v4

      # Node.js 설정
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      # Python 설정 (백엔드용)
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 🐍 Setup Python environment
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r api/requirements.txt
          pip install -r ai/requirements.txt

      # Flutter 설정 (클라이언트용)
      - uses: subosito/flutter-action@v2
        if: needs.changes.outputs.client == 'true'
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: 📱 Setup Flutter
        if: needs.changes.outputs.client == 'true'
        run: |
          cd client
          flutter pub get
          flutter packages pub run build_runner build

      # 린트 실행
      - name: 🔍 Run linters
        run: |
          source venv/bin/activate
          pnpm turbo lint --filter=!@routine-quest/docs

      # 타입 체크
      - name: 🔍 Type checking
        run: |
          source venv/bin/activate
          pnpm turbo type-check --filter=!@routine-quest/docs

  # ===================================
  # 🧪 테스트 실행
  # ===================================
  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    needs: changes

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: routine_user
          POSTGRES_PASSWORD: routine_password
          POSTGRES_DB: routine_quest_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s  
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      # Node.js 설정
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      # Python 설정
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 🐍 Setup Python environment
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r api/requirements.txt
          pip install -r ai/requirements.txt

      # Flutter 설정
      - uses: subosito/flutter-action@v2
        if: needs.changes.outputs.client == 'true'
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: 📱 Setup Flutter
        if: needs.changes.outputs.client == 'true'
        run: |
          cd client
          flutter pub get
          flutter packages pub run build_runner build

      # 데이터베이스 마이그레이션
      - name: 🗄️ Database migration
        if: needs.changes.outputs.api == 'true'
        run: |
          source venv/bin/activate
          cd api
          alembic upgrade head
        env:
          DATABASE_URL: postgresql://routine_user:routine_password@localhost:5432/routine_quest_test

      # 테스트 실행
      - name: 🧪 Run tests
        run: |
          source venv/bin/activate
          pnpm turbo test:coverage --filter=!@routine-quest/docs
        env:
          DATABASE_URL: postgresql://routine_user:routine_password@localhost:5432/routine_quest_test
          REDIS_URL: redis://localhost:6379
          SECRET_KEY: test-secret-key

      # 커버리지 업로드
      - name: 📊 Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./api/coverage.xml,./ai/coverage.xml,./client/coverage/lcov.info
          fail_ci_if_error: false

  # ===================================
  # 🏗️ 빌드 테스트
  # ===================================
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    needs: [changes, lint, test]
    if: |
      always() && 
      needs.lint.result == 'success' && 
      needs.test.result == 'success'

    steps:
      - uses: actions/checkout@v4

      # Node.js 설정
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      # Flutter 설정
      - uses: subosito/flutter-action@v2
        if: needs.changes.outputs.client == 'true'
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: 📱 Setup Flutter
        if: needs.changes.outputs.client == 'true'
        run: |
          cd client
          flutter pub get
          flutter packages pub run build_runner build

      # 빌드 실행
      - name: 🏗️ Build all packages
        run: pnpm turbo build --filter=!@routine-quest/docs

      # 빌드 아티팩트 업로드
      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            client/build/web/
            shared/dist/
          retention-days: 7

  # ===================================
  # 🐳 Docker 빌드 (선택적)
  # ===================================
  docker:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [changes, build]
    if: |
      always() && 
      needs.build.result == 'success' && 
      (needs.changes.outputs.api == 'true' || 
       needs.changes.outputs.ai == 'true' || 
       needs.changes.outputs.docker == 'true')

    steps:
      - uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏗️ Build and push API Docker image
        if: needs.changes.outputs.api == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./api/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ghcr.io/${{ github.repository }}/api:latest
            ghcr.io/${{ github.repository }}/api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🏗️ Build and push AI Docker image
        if: needs.changes.outputs.ai == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./ai/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ghcr.io/${{ github.repository }}/ai:latest
            ghcr.io/${{ github.repository }}/ai:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ===================================
  # ✅ 통합 상태 리포트
  # ===================================
  ci-success:
    name: ✅ CI Success
    runs-on: ubuntu-latest
    needs: [lint, test, build]
    if: always()

    steps:
      - name: ✅ All checks passed
        if: |
          needs.lint.result == 'success' && 
          needs.test.result == 'success' && 
          needs.build.result == 'success'
        run: echo "🎉 All CI checks passed successfully!"

      - name: ❌ Some checks failed
        if: |
          needs.lint.result == 'failure' || 
          needs.test.result == 'failure' || 
          needs.build.result == 'failure'
        run: |
          echo "❌ Some CI checks failed:"
          echo "  Lint: ${{ needs.lint.result }}"
          echo "  Test: ${{ needs.test.result }}"  
          echo "  Build: ${{ needs.build.result }}"
          exit 1
