name: 🚀 Release

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  FLUTTER_VERSION: '3.16.0'

jobs:
  # ===================================
  # 🏷️ 릴리스 준비 및 버전 관리
  # ===================================
  release:
    name: 🏷️ Release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4
        with:
          # 전체 Git 히스토리가 필요 (changeset을 위해)
          fetch-depth: 0
          # Personal Access Token 필요 (protected branch에 push하기 위해)
          token: ${{ secrets.GITHUB_TOKEN }}

      # Node.js 설정
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      # Python 설정 (백엔드 버전 관리용)
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # Flutter 설정 (클라이언트 버전 관리용)
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}

      # Git 설정
      - name: 🔧 Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # Changeset 상태 확인
      - name: 📋 Check for changesets
        id: changeset-status
        run: |
          if pnpm changeset status --output=json | jq -e '.changesets | length > 0'; then
            echo "has-changesets=true" >> $GITHUB_OUTPUT
          else
            echo "has-changesets=false" >> $GITHUB_OUTPUT
          fi

      # 버전 업데이트 및 릴리스
      - name: 🏷️ Version and release
        if: steps.changeset-status.outputs.has-changesets == 'true'
        run: |
          # 버전 업데이트
          pnpm changeset version

          # 빌드 (릴리스 전 최종 확인)
          pnpm turbo build --filter=!@routine-quest/docs

          # 변경사항 커밋
          git add .
          git commit -m "chore: release packages" || echo "No changes to commit"

          # GitHub Release 생성 및 태그
          pnpm changeset publish

          # 변경사항 푸시
          git push origin main --follow-tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 릴리스 노트 생성
      - name: 📝 Generate release notes
        if: steps.changeset-status.outputs.has-changesets == 'true'
        run: |
          # 최신 태그 정보 가져오기
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")

          # 릴리스 노트 생성
          echo "## 🎉 Release Notes" > release-notes.md
          echo "" >> release-notes.md
          echo "### Changes since $LATEST_TAG" >> release-notes.md
          echo "" >> release-notes.md

          # Changeset에서 변경사항 추출
          if [ -f "CHANGELOG.md" ]; then
            head -50 CHANGELOG.md >> release-notes.md
          fi

      # 배포 트리거 (필요시)
      - name: 🚀 Trigger deployment
        if: steps.changeset-status.outputs.has-changesets == 'true'
        run: |
          echo "🚀 릴리스가 완료되었습니다!"
          echo "배포는 별도의 워크플로우에서 진행됩니다."

          # 배포 워크플로우 트리거 (선택적)
          # gh workflow run deploy.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ===================================
  # 📊 릴리스 후 작업
  # ===================================
  post-release:
    name: 📊 Post Release
    runs-on: ubuntu-latest
    needs: release
    if: always() && needs.release.result == 'success'

    steps:
      - uses: actions/checkout@v4

      # 릴리스 성공 알림 (선택적)
      - name: 📢 Release notification
        run: |
          echo "📢 새로운 릴리스가 배포되었습니다!"
          # 슬랙, 디스코드 등 알림 설정 가능

          # 현재 버전 확인
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "🏷️ Version: $CURRENT_VERSION"

          # 릴리스 통계
          echo "📊 릴리스 통계:"
          echo "  • 커밋 수: $(git rev-list --count HEAD)"
          echo "  • 기여자 수: $(git shortlog -sn | wc -l)"

      # 다음 개발 사이클 준비 (선택적)
      - name: 🔄 Prepare next development cycle
        run: |
          echo "🔄 다음 개발 사이클을 준비합니다..."

          # 개발 브랜치 정리, 이슈 정리 등
          # 필요에 따라 자동화 작업 추가
