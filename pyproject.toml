[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "routine-quest-app"
description = "Routine Quest App - Îã§Ïùå 1Ïä§ÌÖùÎßå Î≥¥Ïó¨Ï£ºÎäî ÏàúÏÑú Í∏∞Î∞ò ÌÄòÏä§Ìä∏Ìòï Î£®Ìã¥ Ïï±"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "Private"}
authors = [
    {name = "Routine Quest Team", email = "dev@routinequest.com"},
]
keywords = ["routine", "habit", "quest", "productivity", "app"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop", 
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dynamic = ["version"]

# ===================================
# üîß Development Tools Configuration
# ===================================

[tool.setuptools]
packages = ["api", "ai", "shared"]

[tool.setuptools_scm]
write_to = "api/_version.py"

# üêç Black - Code Formatter
[tool.black]
line-length = 88
target-version = ["py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
    # directories
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
  | alembic/versions
)/
'''

# ‚ö° Ruff - Fast Python Linter
[tool.ruff]
line-length = 88
indent-width = 4
target-version = "py311"

[tool.ruff.lint]
# Enable pycodestyle (E), Pyflakes (F), isort (I), and other rules
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings  
    "F",  # Pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
    "S",  # flake8-bandit (security)
    "T20", # flake8-print
]

ignore = [
    "E501",  # Line too long, handled by black
    "B008",  # Do not perform function calls in argument defaults
    "S104",  # Possible binding to all interfaces
    "S608",  # Possible SQL injection via string concatenation
]

[tool.ruff.lint.per-file-ignores]
# Tests can use asserts and print statements
"**/tests/**/*.py" = ["S101", "T201"]
"**/test_*.py" = ["S101", "T201"]
# Migration files can have any structure
"**/alembic/versions/*.py" = ["E501", "N999"]

[tool.ruff.format]
# Like Black, use double quotes for strings
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["app", "shared"]
known-third-party = ["fastapi", "sqlalchemy", "pydantic"]

# üîç MyPy - Static Type Checker
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Per-module options
[[tool.mypy.overrides]]
module = [
    "alembic.*",
    "celery.*",
    "redis.*",
    "firebase_admin.*",
    "google.*",
    "sentry_sdk.*"
]
ignore_missing_imports = true

# üß™ Pytest - Testing Framework
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers", 
    "--strict-config",
    "--cov=app",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-fail-under=80"
]
testpaths = ["api/tests", "ai/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "db: marks tests that require database",
    "redis: marks tests that require Redis",
    "external: marks tests that call external APIs"
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["api/app", "ai/app"]
omit = [
    "*/tests/*",
    "*/alembic/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# ===================================
# üì¶ Development Dependencies
# ===================================

[tool.pip-tools]
generate-hashes = true
upgrade = true